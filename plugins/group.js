const { cmd } = require('../command'), { jsonformat } = require('../lib/functions'); cmd({ pattern: "close", react: "👺", desc: "close a group", category: "group", use: '.mute', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. 🚫'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. 🤖'); if (!isAdmins) return reply('Only admins can use this command. 👮‍♂️'); await conn.groupSettingUpdate(mek.chat, 'announcement'); await conn.sendMessage(from, { text: 'Group closed now. 🔒\nᴍʀ ᴅɪʟᴀ ᴏꜰᴄ', react: { text: '✅', key: mek.key } }); } catch (e) { reply('Error closing the group. ⚠️'); console.log(e); } }); cmd({ pattern: "open", react: "👺", desc: "open a group", category: "group", use: '.unmute', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. 🚫'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. 🤖'); if (!isAdmins) return reply('Only admins can use this command. 👮‍♂️'); await conn.groupSettingUpdate(mek.chat, 'not_announcement'); await conn.sendMessage(from, { text: 'Group opened now. 🔓\nᴍʀ ᴅɪʟᴀ ᴏꜰᴄ', react: { text: '✅', key: mek.key } }); } catch (e) { reply('Error opening the group. ⚠️'); console.log(e); } }); cmd({ pattern: "setadmin", react: "🤝", desc: "promote admin to a member", category: "group", use: '.promote', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. 🚫'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. 🤖'); if (!isAdmins) return reply('Only admins can use this command. 👮‍♂️'); let users = mek.mentionedJid ? mek.mentionedJid : mek.quoted ? mek.quoted.sender : q.replace(/[^0-9]/g, '') + '@s.whatsapp.net'; await conn.groupParticipantsUpdate(mek.chat, [users], 'promote'); reply('Congratulations, you are now an admin! 🥳\nᴍʀ ᴅɪʟᴀ ᴏꜰᴄ'); await conn.sendMessage(from, { react: { text: '✅', key: mek.key } }); } catch (e) { reply('Error promoting to admin. ⚠️'); console.log(e); } }); cmd({ pattern: "deladmin", react: "🚫", desc: "demote admin to a member", category: "group", use: '.demote', filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. 🚫'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. 🤖'); if (!isAdmins) return reply('Only admins can use this command. 👮‍♂️'); let users = mek.mentionedJid ? mek.mentionedJid : mek.quoted ? mek.quoted.sender : q.replace(/[^0-9]/g, '') + '@s.whatsapp.net'; await conn.groupParticipantsUpdate(mek.chat, [users], 'demote'); reply('You have been demoted from admin. 😔\nᴍʀ ᴅɪʟᴀ ᴏꜰᴄ'); await conn.sendMessage(from, { react: { text: '✅', key: mek.key } }); } catch (e) { reply('Error demoting admin. ⚠️'); console.log(e); } }); cmd({ pattern: "delete", react: "❌", alias: [","], desc: "delete message", category: "group", use: '.del', filename: __filename }, async (conn, mek, m, { from, isOwner, isAdmins, reply }) => { if (!isOwner && !isAdmins) return; try { if (!m.quoted) return reply('No message to delete. 🗑️'); const key = { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender }; await conn.sendMessage(m.chat, { delete: key }); reply('Message deleted. ✅\nᴍʀ ᴅɪʟᴀ ᴏꜰᴄ'); } catch (e) { console.log(e); reply('Error deleting message. ⚠️'); } }); cmd({ pattern: "add", desc: "Add a member to the group.", category: "group", react: "➕", filename: __filename }, async (conn, mek, m, { from, isGroup, isBotAdmins, isAdmins, reply }) => { try { if (!isGroup) return reply('This command can only be used in a group. 🚫'); if (!isBotAdmins) return reply('Bot must be an admin to use this command. 🤖'); if (!isAdmins) return reply('Only admins can use this command. 👮‍♂️'); const user = q.split(' ')[0]; if (!user) return reply('Please provide a phone number to add. 📞'); await conn.groupParticipantsUpdate(from, [`${user}@s.whatsapp.net`], 'add'); await reply(`@${user} has been added to the group. 🎉`, { mentions: [`${user}@s.whatsapp.net`] }); } catch (e) { console.log(e); reply('Error adding member. ⚠️'); } });
